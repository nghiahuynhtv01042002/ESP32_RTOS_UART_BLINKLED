[1/10] Performing build step for 'bootloader'
[1/1] cmd.exe /C "cd /D G:\esp_IDF\esp32_idf\Espressif\frameworks\esp-idf-v5.2.2\examples\My_Project\RTOS_led_uart\build\bootloader\esp-idf\esptool_py && G:\esp_IDF\esp32_idf\Espressif\python_env\idf5.2_py3.11_env\Scripts\python.exe G:/esp_IDF/esp32_idf/Espressif/frameworks/esp-idf-v5.2.2/components/partition_table/check_sizes.py --offset 0x8000 bootloader 0x1000 G:/esp_IDF/esp32_idf/Espressif/frameworks/esp-idf-v5.2.2/examples/My_Project/RTOS_led_uart/build/bootloader/bootloader.bin"
Bootloader binary size 0x6860 bytes. 0x7a0 bytes (7%) free.
[2/8] Building C object esp-idf/main/CMakeFiles/__idf_main.dir/main.c.obj
[3/8] Linking C static library esp-idf\main\libmain.a
[4/8] Generating ld/sections.ld
[5/8] Linking CXX executable RTOS_led_uart.elf
[6/8] Generating binary image from built executable
esptool.py v4.7.0
Creating esp32 image...
Merged 2 ELF sections
Successfully created esp32 image.
Generated G:/esp_IDF/esp32_idf/Espressif/frameworks/esp-idf-v5.2.2/examples/My_Project/RTOS_led_uart/build/RTOS_led_uart.bin
[7/8] cmd.exe /C "cd /D G:\esp_IDF\esp32_idf\Espressif\frameworks\esp-idf-v5.2.2\examples\My_Project\RTOS_led_uart\build\esp-idf\esptool_py && G:\esp_IDF\esp32_idf\Espressif\python_env\idf5.2_py3.11_env\Scripts\python.exe G:/esp_IDF/esp32_idf/Espressif/frameworks/esp-idf-v5.2.2/components/partition_table/check_sizes.py --offset 0x8000 partition --type app G:/esp_IDF/esp32_idf/Espressif/frameworks/esp-idf-v5.2.2/examples/My_Project/RTOS_led_uart/build/partition_table/partition-table.bin G:/esp_IDF/esp32_idf/Espressif/frameworks/esp-idf-v5.2.2/examples/My_Project/RTOS_led_uart/build/RTOS_led_uart.bin"
RTOS_led_uart.bin binary size 0x2bce0 bytes. Smallest app partition is 0x100000 bytes. 0xd4320 bytes (83%) free.
[7/8] cmd.exe /C "cd /D G:\esp_IDF\esp32_idf\Espressif\frameworks\esp-idf-v5.2.2\components\esptool_py && G:\esp_IDF\esp32_idf\Espressif\tools\cmake\3.24.0\bin\cmake.exe -D IDF_PATH=G:/esp_IDF/esp32_idf/Espressif/frameworks/esp-idf-v5.2.2 -D Sesptool.py --chip esp32 -p COM3 -b 460800 --before=default_reset --after=hard_reset write_flash --flash_mode dio --flash_freq 40m --flash_size 2MB 0x1000 bootloader/bootloader.bin 0x10000 RTOS_led_uart.bin 0x8000 partition_table/partition-table.bin
esptool.py v4.7.0
Serial port COM3
Connecting....
Chip is ESP32-D0WD-V3 (revision v3.0)
Features: WiFi, BT, Dual Core, 240MHz, VRef calibration in efuse, Coding Scheme None
Crystal is 40MHz
MAC: b0:a7:32:da:f9:a0
Uploading stub...
Running stub...
Stub running...
Changing baud rate to 460800
Changed.
Configuring flash size...
Flash will be erased from 0x00001000 to 0x00007fff...
Flash will be erased from 0x00010000 to 0x0003bfff...
Flash will be erased from 0x00008000 to 0x00008fff...
Compressed 26720 bytes to 16350...
Writing at 0x00001000... (100 %)
Wrote 26720 bytes (16350 compressed) at 0x00001000 in 0.5 seconds (effective 404.3 kbit/s)...
Hash of data verified.
Compressed 179424 bytes to 95921...
Writing at 0x00010000... (16 %)
Writing at 0x0001c3cc... (33 %)
Writing at 0x00021dd4... (50 %)
Writing at 0x00027874... (66 %)
Writing at 0x0002f012... (83 %)
Writing at 0x000362f1... (100 %)
Wrote 179424 bytes (95921 compressed) at 0x00010000 in 2.3 seconds (effective 616.1 kbit/s)...
Hash of data verified.
Compressed 3072 bytes to 103...
Writing at 0x00008000... (100 %)
Wrote 3072 bytes (103 compressed) at 0x00008000 in 0.0 seconds (effective 1170.4 kbit/s)...
Hash of data verified.

Leaving...
Hard resetting via RTS pin...
ERIAL_TOOL=G:/esp_IDF/esp32_idf/Espressif/python_env/idf5.2_py3.11_env/Scripts/python.exe;;G:/esp_IDF/esp32_idf/Espressif/frameworks/esp-idf-v5.2.2/components/esptool_py/esptool/esptool.py;--chip;esp32 -D SERIAL_TOOL_ARGS=--before=default_reset;--after=hard_reset;write_flash;@flash_args -D WORKING_DIRECTORY=G:/esp_IDF/esp32_idf/Espressif/frameworks/esp-idf-v5.2.2/examples/My_Project/RTOS_led_uart/build -P G:/esp_IDF/esp32_idf/Espressif/frameworks/esp-idf-v5.2.2/components/esptool_py/run_serial_tool.cmake"
